---
- name: Ensure git's dependencies are installed (RedHat).
  package: "name={{ item }} state=installed"
  with_items:
    - gettext-devel
    - expat-devel
    - curl-devel
    - zlib-devel
    - perl-devel
    - openssl-devel
    - subversion-perl
    - make
    - gcc
  when: ansible_os_family == 'RedHat'

- name: Ensure git's dependencies are installed (Debian).
  apt: "name={{ item }} state=installed"
  with_items:
    - libcurl4-gnutls-dev
    - libexpat1-dev
    - gettext
    - libssl-dev
    - build-essential
    - gcc
  when: ansible_os_family == 'Debian'

- name: Get installed version
  command: >
    git --version
    warn=no
  changed_when: false
  failed_when: false
#  check_mode: no
  register: git_installed_version

- name: Force git install if the version numbers do not match
  set_fact:
    git_reinstall_from_source: true
  when: 'git_install_from_source_force_update and (git_installed_version|success and (git_installed_version.stdout | regex_replace("^.*?([0-9\.]+)$", "\\1") | version_compare(git_version, operator="!=")))'

- name: Download git.
  get_url:
    url: "https://www.kernel.org/pub/software/scm/git/git-{{ git_version }}.tar.gz"
    dest: "{{ workspace }}/git-{{ git_version }}.tar.gz"
    owner: '{{ git_remote_user }}'
    group: '{{ git_remote_group }}'
  when:  git_installed_version|failed or git_reinstall_from_source

- name: Expand git archive.
  unarchive:
    src: "{{ workspace }}/git-{{ git_version }}.tar.gz"
    dest: "{{ workspace }}"
    owner: '{{ git_remote_user }}'
    group: '{{ git_remote_group }}'
    creates: "{{ workspace }}/git-{{ git_version }}/README"
    copy: no
  when:  git_installed_version|failed or git_reinstall_from_source

- name: configure git.
  become: '{{ git_remote_user }}'
  command: >
    ./configure prefix={{ git_install_path }}
    chdir={{ workspace }}/git-{{ git_version }}
  when:  git_installed_version|failed or git_reinstall_from_source


- name: Build git.
  become: '{{ git_remote_user }}'
  command: >
    make prefix={{ git_install_path }} {{ item }}
    chdir={{ workspace }}/git-{{ git_version }}
  with_items:
    - all
    - install
  when:  git_installed_version|failed or git_reinstall_from_source

# Create symlink to last version of git installed
# Should we add a force to link creation?

- name: "Create symlink to version of git just installed if none exists"
  become: True
  command: ln -s {{ git_install_path }}/bin/git git
  args:
    chdir  : '{{ git_link_root }}'
    creates: '{{ git_link_root }}/git'
  when:  git_installed_version|failed or git_reinstall_from_source


- name: "Force creation of symlink to version of git just installed"
  become: True
  command: ln -sf {{ git_install_path }}/bin/git git
  args:
    chdir  : '{{ git_link_root }}'
  when:
    - git_installed_version|failed or git_reinstall_from_source
    - git_link_force == true



